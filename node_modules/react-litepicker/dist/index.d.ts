import LitePicker from 'litepicker';
import * as React from 'react';
export declare type DateExp = Date | number | String;
export declare type DateRange = [DateExp, DateExp];
export interface RangeArray extends Array<DateRange> {
}
export interface DateArray extends Array<DateExp> {
}
export declare type LitePickerType = typeof LitePicker;
export interface LitePickerBaseProps {
    rootElement?: React.MutableRefObject<HTMLElement | null | undefined>;
    endRootElement?: React.MutableRefObject<HTMLElement | null | undefined>;
    firstDay?: number;
    format?: string;
    lang?: string;
    numberOfMonths?: number;
    numberOfColumns?: number;
    minDate?: DateExp;
    maxDate?: DateExp;
    minDays?: number;
    maxDays?: number;
    selectForward?: boolean;
    splitView?: boolean;
    inlineMode?: boolean;
    singleMode?: boolean;
    autoApply?: boolean;
    allowRepick?: boolean;
    showWeekNumbers?: boolean;
    showTooltip?: boolean;
    hotelMode?: boolean;
    disableWeekends?: boolean;
    scrollToDate?: boolean;
    mobileFriendly?: boolean;
    useResetBtn?: boolean;
    autoRefresh?: boolean;
    moveByOneMonth?: boolean;
    lockDaysFormat?: string;
    disallowLockDaysInRange?: boolean;
    lockDaysInclusivity?: string;
    bookedDaysFormat?: string;
    disallowBookedDaysInRange?: boolean;
    bookedDaysInclusivity?: string;
    anyBookedDaysAsCheckout?: boolean;
    highlightedDaysFormat?: string;
    moduleRanges?: boolean | Object;
    dropdowns?: {
        minYear?: number;
        maxYear?: number;
        months?: 'asc' | 'desc';
        years?: 'asc' | 'desc';
    };
    ApplyButton?: React.ReactNode;
    CancelButton?: React.ReactNode;
    PreviousMonthButton?: React.ReactNode;
    NextMonthButton?: React.ReactNode;
    ResetButton?: React.ReactNode;
    onReset?: () => void;
    onShow?: () => void;
    onHide?: () => void;
    onSelect?: (date1: Date, date2?: Date) => void;
    onError?: (err: Error) => void;
    onRender?: (elm: Element) => void;
    onRenderDay?: (elm: Element) => void;
    onChangeMonth?: (date: Date, idx: number) => void;
    onChangeYear?: (date: Date, idx: number) => void;
    onDayHover?: (date: Date, attributes: string[]) => void;
    onShowTooltip?: () => void;
    noCss?: boolean;
    children?: React.ForwardRefExoticComponent<any>;
}
export interface LitePickerPropsWithRanges {
    moduleRanges: Object;
    lockDays?: RangeArray;
    bookedDays?: RangeArray;
}
export interface LitePickerPropsWithoutRanges {
    moduleRanges: undefined;
    lockDays?: DateArray;
    highlightedDays?: DateArray;
}
export declare type LitePickerProps = LitePickerBaseProps & (LitePickerPropsWithRanges | LitePickerPropsWithoutRanges);
declare const LP: React.ForwardRefExoticComponent<(LitePickerBaseProps & LitePickerPropsWithRanges & React.RefAttributes<any>) | (LitePickerBaseProps & LitePickerPropsWithoutRanges & React.RefAttributes<any>)>;
export default LP;
